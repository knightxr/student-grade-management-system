package sgms.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.temporal.TemporalAdjusters;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableRowSorter;
import sgms.dao.AssignmentDAO;
import sgms.dao.FinalGradeDAO;
import sgms.dao.GradeDAO;
import sgms.dao.StudentDAO;
import sgms.dao.AttendanceDAO;
import sgms.dao.impl.UcanaccessAssignmentDAO;
import sgms.dao.impl.UcanaccessFinalGradeDAO;
import sgms.dao.impl.UcanaccessGradeDAO;
import sgms.dao.impl.UcanaccessStudentDAO;
import sgms.dao.impl.UcanaccessAttendanceDAO;
import sgms.model.Assignment;
import sgms.model.Course;
import sgms.model.FinalGrade;
import sgms.model.Student;
import sgms.util.SearchUtil;

/**
 * 
 * @author Jacques Smit 12E
 *  Main application frame that hosts the navigation sidebar and a data table
 */
public class MainPage extends javax.swing.JFrame {

    private final StudentDAO studentDAO = new UcanaccessStudentDAO();
    private StudentTableModel studentTableModel;
    private StudentSelectionTableModel studentSelectionModel;
    private StudentGradesTableModel studentGradesModel;
    private FinalGradesTableModel finalGradesModel;
    private AttendanceTableModel attendanceModel;
    private boolean selectionMode = false;
    private int attendanceTodayColumn = -1;
    /**
     * Creates new form MainFrame
     */
    public MainPage() {
        initComponents();
        jTable = new JTable() {
            @Override
            public Component prepareRenderer(javax.swing.table.TableCellRenderer renderer, int row, int column) {
                Component c = super.prepareRenderer(renderer, row, column);
                if (selectionMode && MainPage.this.studentSelectionModel != null) {
                    int modelRow = convertRowIndexToModel(row);
                    if (MainPage.this.studentSelectionModel.isNewlySelected(modelRow)) {
                        c.setBackground(Color.GREEN);
                    } else if (MainPage.this.studentSelectionModel.isDeselected(modelRow)) {
                        c.setBackground(Color.RED);
                    } else {
                        Color base = (row % 2 == 0) ? Color.WHITE : new Color(245, 245, 245);
                        c.setBackground(isRowSelected(row) ? getSelectionBackground() : base);
                    }
                } else {
                    Color base = (row % 2 == 0) ? Color.WHITE : new Color(245, 245, 245);
                    if (attendanceModel != null && column == attendanceTodayColumn) {
                        base = new Color(255, 255, 200);
                    }
                    c.setBackground(isRowSelected(row) ? getSelectionBackground() : base);
                }
                return c;
            }
        };
        jScrollPane.setViewportView(jTable);
        jTable.setModel(new javax.swing.table.DefaultTableModel());
        jTable.setAutoCreateRowSorter(true);
        jTable.getTableHeader().setFont(jTable.getTableHeader().getFont().deriveFont(Font.BOLD));
        jTextFieldSearch.setText("Search");
        jTextFieldSearch.setForeground(Color.GRAY);
        jButtonSave.addActionListener(this::jButtonSaveActionPerformed);
        jButtonEdit.addActionListener(this::jButtonEditActionPerformed);
        SearchUtil.installSearch(jTable, jTextFieldSearch, jButtonSearch);
        jComboBox.setEnabled(false);
        jComboBox.removeAllItems();
    }

    /**
     * Creates a new MainPage and displays a personalized welcome message for
     * the logged-in user.
     *
     * @param userFullName the full name of the user to display
     */
    public MainPage(String userFullName) {
        this();
        setWelcomeName(userFullName);
    }

    /**
     * Updates the welcome label with the provided user's full name.
     *
     * @param userFullName the name to show in the welcome message
     */
    public void setWelcomeName(String userFullName) {
        jLabelWelcomeName.setText("<html> <center>Welcome<br>" + userFullName + "!</center></html>");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabelWelcomeName = new javax.swing.JLabel();
        jButtonViewFinalGrades = new javax.swing.JButton();
        jButtonViewStudents = new javax.swing.JButton();
        jButtonViewStudentGrades = new javax.swing.JButton();
        jButtonManageCourses = new javax.swing.JButton();
        jButtonManageAssignments = new javax.swing.JButton();
        jButtonStudentFeedback = new javax.swing.JButton();
        jButtonCreateReportCard = new javax.swing.JButton();
        jButtonAttendance = new javax.swing.JButton();
        iconViewStudents = new javax.swing.JLabel();
        iconViewStudentGrades = new javax.swing.JLabel();
        iconViewFinalGrades = new javax.swing.JLabel();
        iconAttendance = new javax.swing.JLabel();
        iconManageCourses = new javax.swing.JLabel();
        iconManageAssignments = new javax.swing.JLabel();
        iconStudentFeedback = new javax.swing.JLabel();
        iconCreateReportCard = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jComboBox = new javax.swing.JComboBox<>();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonSearch = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabelMadeByJacquesSmit = new javax.swing.JLabel();
        jButtonHelp = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabelSGMS = new javax.swing.JLabel();
        jButtonLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.foreground"));

        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 153, 255));
        jPanel2.setForeground(new java.awt.Color(51, 102, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelWelcomeName.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabelWelcomeName.setForeground(new java.awt.Color(0, 0, 0));
        jLabelWelcomeName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelWelcomeName.setText("<html> <center>Welcome<br>Name!");
        jLabelWelcomeName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel2.add(jLabelWelcomeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 217, 65));

        jButtonViewFinalGrades.setText("View Final Grades");
        jButtonViewFinalGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewFinalGradesActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonViewFinalGrades, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 211, 150, 36));

        jButtonViewStudents.setText("View Students");
        jButtonViewStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewStudentsActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonViewStudents, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 83, 150, 36));

        jButtonViewStudentGrades.setText("View Student Grades");
        jButtonViewStudentGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewStudentGradesActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonViewStudentGrades, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 147, 150, 36));

        jButtonManageCourses.setText("Manage Courses");
        jButtonManageCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManageCoursesActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonManageCourses, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 339, 150, 36));

        jButtonManageAssignments.setText("Manage Assignments");
        jPanel2.add(jButtonManageAssignments, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 403, 150, 36));

        jButtonStudentFeedback.setText("Student Feedback");
        jPanel2.add(jButtonStudentFeedback, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 467, 150, 36));

        jButtonCreateReportCard.setText("Create Report Card");
        jPanel2.add(jButtonCreateReportCard, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 531, 150, 36));

        jButtonAttendance.setText("Attendance");
        jButtonAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAttendanceActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonAttendance, new org.netbeans.lib.awtextra.AbsoluteConstraints(75, 275, 150, 36));

        iconViewStudents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgms/data/icons/view students.png"))); // NOI18N
        jPanel2.add(iconViewStudents, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        iconViewStudentGrades.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgms/data/icons/grades.png"))); // NOI18N
        jPanel2.add(iconViewStudentGrades, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 130, 50, -1));

        iconViewFinalGrades.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgms/data/icons/final grades.png"))); // NOI18N
        jPanel2.add(iconViewFinalGrades, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        iconAttendance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgms/data/icons/attendance.png"))); // NOI18N
        jPanel2.add(iconAttendance, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 266, -1, -1));

        iconManageCourses.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgms/data/icons/courses.png"))); // NOI18N
        jPanel2.add(iconManageCourses, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 327, -1, -1));

        iconManageAssignments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgms/data/icons/assignments.png"))); // NOI18N
        jPanel2.add(iconManageAssignments, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 392, -1, -1));

        iconStudentFeedback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgms/data/icons/feedback.png"))); // NOI18N
        jPanel2.add(iconStudentFeedback, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, -1, -1));

        iconCreateReportCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgms/data/icons/print report.png"))); // NOI18N
        jPanel2.add(iconCreateReportCard, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 522, -1, -1));

        jPanel4.setForeground(java.awt.Color.white);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxActionPerformed(evt);
            }
        });
        jPanel4.add(jComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 6, 272, 35));

        jTextFieldSearch.setText("Search");
        jTextFieldSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSearchFocusLost(evt);
            }
        });
        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });
        jPanel4.add(jTextFieldSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 6, 253, 35));

        jButtonSave.setBackground(new java.awt.Color(6, 136, 6));
        jButtonSave.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(964, 10, 67, -1));

        jButtonEdit.setBackground(new java.awt.Color(204, 153, 0));
        jButtonEdit.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        jButtonEdit.setText("Edit");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(891, 10, 67, -1));

        jButtonDelete.setBackground(new java.awt.Color(187, 52, 6));
        jButtonDelete.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(815, 10, 70, -1));

        jButtonAdd.setBackground(new java.awt.Color(0, 153, 255));
        jButtonAdd.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(742, 10, 67, -1));

        jButtonSearch.setBackground(new java.awt.Color(0, 153, 255));
        jButtonSearch.setFont(new java.awt.Font("Helvetica Neue", 1, 20)); // NOI18N
        jButtonSearch.setText("⌕");
        jButtonSearch.setActionCommand("");
        jButtonSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(639, 10, 28, 28));

        jTable.setBackground(new java.awt.Color(255, 255, 255));
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane.setViewportView(jTable);

        jPanel4.add(jScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 1020, 550));

        jPanel6.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(153, 153, 153)));
        jPanel6.setForeground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelMadeByJacquesSmit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelMadeByJacquesSmit.setForeground(new java.awt.Color(0, 0, 0));
        jLabelMadeByJacquesSmit.setText("Made by Jacques Smit");
        jPanel6.add(jLabelMadeByJacquesSmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        jButtonHelp.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButtonHelp.setForeground(new java.awt.Color(0, 0, 0));
        jButtonHelp.setText("Need help? Click here");
        jButtonHelp.setToolTipText("");
        jButtonHelp.setBorder(null);
        jButtonHelp.setBorderPainted(false);
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });
        jPanel6.add(jButtonHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 10, 160, 20));

        jPanel5.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelSGMS.setFont(new java.awt.Font("Malgun Gothic", 1, 30)); // NOI18N
        jLabelSGMS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSGMS.setText("Student Grade Management System");
        jLabelSGMS.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabelSGMS.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel5.add(jLabelSGMS, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 0, -1, 50));

        jButtonLogout.setBackground(new java.awt.Color(255, 51, 51));
        jButtonLogout.setText("Logout");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });
        jPanel5.add(jButtonLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 6, -1, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonViewStudentGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewStudentGradesActionPerformed
        loadCoursesForGrades();
        jComboBox.setEnabled(true);
        jButtonAdd.setEnabled(false);
        jButtonDelete.setEnabled(false);
        jButtonSave.setEnabled(false);
        jButtonEdit.setEnabled(false);
        studentTableModel = null;
        finalGradesModel = null;
        studentSelectionModel = null;
        attendanceModel = null;
        attendanceTodayColumn = -1;
        selectionMode = false;
        loadStudentGradesForSelectedCourse();
    }//GEN-LAST:event_jButtonViewStudentGradesActionPerformed

    private void jButtonManageCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManageCoursesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonManageCoursesActionPerformed

    private void jButtonViewStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewStudentsActionPerformed
        loadCourses();
        jComboBox.setEnabled(true);
        jButtonAdd.setEnabled(true);
        jButtonDelete.setEnabled(true);
        jButtonSave.setEnabled(true);
        jButtonEdit.setEnabled(true);
        studentGradesModel = null;
        finalGradesModel = null;
        attendanceModel = null;
        attendanceTodayColumn = -1;
        selectionMode = false;
        studentSelectionModel = null;
        loadStudentsForSelectedCourse();
    }//GEN-LAST:event_jButtonViewStudentsActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        if (finalGradesModel != null) {
            return;
        }
        if (studentGradesModel != null) {
            int courseId = getSelectedCourseId();
            String title = JOptionPane.showInputDialog(this, "Assignment title:");
            if (title == null || title.trim().isEmpty()) {
                return;
            }
            AssignmentDAO dao = new UcanaccessAssignmentDAO();
            try {
                Assignment a = dao.add(new Assignment(courseId, title.trim()));
                studentGradesModel.addAssignment(a);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Unable to add assignment: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
            return;
        }
        int courseId = getSelectedCourseId();
        if (courseId > 0) {
            if (!selectionMode) {
                startEnrollmentEdit();
            }
            return;
        }
        if (studentTableModel != null) {
            try {
                Student s = studentDAO.add(new Student("", "", 0));
                if (jTable.getRowSorter() != null) {
                    jTable.getRowSorter().setSortKeys(null);
                }
                studentTableModel.addStudent(s);
                int row = studentTableModel.getRowCount() - 1;
                jTable.setRowSelectionInterval(row, row);
                jTable.scrollRectToVisible(jTable.getCellRect(row, 0, true));
                jTable.editCellAt(row, 1);
                Component editor = jTable.getEditorComponent();
                if (editor != null) {
                    editor.requestFocusInWindow();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Unable to add student: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        if (finalGradesModel != null) {
            return;
        }
        if (studentGradesModel != null) {
            int col = jTable.getSelectedColumn();
            if (col > 0) {
                Assignment a = studentGradesModel.getAssignmentAt(col - 1);
                AssignmentDAO dao = new UcanaccessAssignmentDAO();
                try {
                    dao.delete(a.getAssignmentId());
                    studentGradesModel.removeAssignment(col - 1);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Unable to delete assignment: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            return;
        }
        if (studentTableModel == null) {
            return;
        }
        int courseId = getSelectedCourseId();
        if (courseId > 0) {
            if (!selectionMode) {
                startEnrollmentEdit();
            }
            return;
        }
        int row = jTable.getSelectedRow();
        if (row >= 0) {
            Student s = studentTableModel.getStudent(row);
            if (s.getStudentId() > 0) {
                try {
                    studentDAO.delete(s.getStudentId());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Unable to delete student: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            studentTableModel.removeStudent(row);
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxActionPerformed
        if (studentTableModel != null) {
            loadStudentsForSelectedCourse();
            } else if (studentGradesModel != null) {
            loadStudentGradesForSelectedCourse();
        } else if (finalGradesModel != null) {
            loadFinalGradesForSelectedGrade();
        } else if (attendanceModel != null) {
            loadAttendanceForSelectedCourse();
        }
    }//GEN-LAST:event_jComboBoxActionPerformed

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void jButtonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonHelpActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        LoginPage loginPage = new LoginPage();
        loginPage.setVisible(true);
        dispose();

    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jTextFieldSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSearchFocusGained
        if ("Search".equals(jTextFieldSearch.getText())) {
            jTextFieldSearch.setText("");
            jTextFieldSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_jTextFieldSearchFocusGained

    private void jTextFieldSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSearchFocusLost
        if (jTextFieldSearch.getText().isEmpty()) {
            jTextFieldSearch.setText("Search");
            jTextFieldSearch.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_jTextFieldSearchFocusLost

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if (selectionMode && studentSelectionModel != null) {
            try {
                int courseId = getSelectedCourseId();
                Set<Integer> selected = studentSelectionModel.getSelectedStudentIds();
                Set<Integer> original = studentSelectionModel.getOriginallySelectedIds();
                for (Integer id : selected) {
                    if (!original.contains(id)) {
                        studentDAO.enrollStudentInCourse(id, courseId);
                    }
                }
                for (Integer id : original) {
                    if (!selected.contains(id)) {
                        studentDAO.removeStudentFromCourse(id, courseId);
                    }
                }
                selectionMode = false;
                studentSelectionModel = null;
                attendanceModel = null;
                attendanceTodayColumn = -1;
                loadStudentsForSelectedCourse();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Unable to update enrollments: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
            return;
        }
        if (attendanceModel != null) {
            try {
                AttendanceDAO dao = new UcanaccessAttendanceDAO();
                int courseId = getSelectedCourseId();
                for (Map.Entry<Integer, Map<LocalDate, Boolean>> e : attendanceModel.getChanges().entrySet()) {
                    int studentId = e.getKey();
                    for (Map.Entry<LocalDate, Boolean> att : e.getValue().entrySet()) {
                        dao.upsert(studentId, courseId, att.getKey(), att.getValue());
                    }
                }
                attendanceModel.clearChanges();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Unable to save attendance: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
            return;
        }
        if (studentTableModel == null) {
            return;
        }
        for (Student s : studentTableModel.getStudents()) {
            if (s.getFirstName().trim().isEmpty() || s.getLastName().trim().isEmpty() || s.getGradeLevel() <= 0) {
                JOptionPane.showMessageDialog(this,
                        "All student fields must be filled.",
                        "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        try {
            for (Student s : studentTableModel.getStudents()) {
                if (s.getStudentId() == 0) {
                    studentDAO.add(s);
                } else {
                    studentDAO.update(s);
                }
            }
            // Refresh table to show any generated IDs
            int courseId = getSelectedCourseId();
            List<Student> students = courseId > 0 ?
                    studentDAO.findByCourse(courseId) : studentDAO.findAll();
            studentTableModel.setStudents(students);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to save students: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        if (finalGradesModel != null) {
            return;
        }
        if (studentGradesModel != null) {
            int row = jTable.getSelectedRow();
            int col = jTable.getSelectedColumn();
            if (row >= 0 && col > 0) {
                jTable.editCellAt(row, col);
            }
            return;
        }
        if (studentTableModel == null) {
            return;
        }
        int courseId = getSelectedCourseId();
        if (courseId > 0) {
            if (!selectionMode) {
                startEnrollmentEdit();
            }
            return;
        }
        int row = jTable.getSelectedRow();
        int col = jTable.getSelectedColumn();
        if (row >= 0 && col >= 0) {
            jTable.editCellAt(row, col);
        }
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonViewFinalGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewFinalGradesActionPerformed
        loadGradeLevelsForFinalGrades();
        jComboBox.setEnabled(true);
        jButtonAdd.setEnabled(false);
        jButtonDelete.setEnabled(false);
        jButtonSave.setEnabled(false);
        jButtonEdit.setEnabled(false);
        studentTableModel = null;
        studentGradesModel = null;
        studentSelectionModel = null;
        attendanceModel = null;
        attendanceTodayColumn = -1;
        selectionMode = false;
        loadFinalGradesForSelectedGrade();
    }//GEN-LAST:event_jButtonViewFinalGradesActionPerformed

    private void jButtonAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAttendanceActionPerformed
         loadCoursesForAttendance();
        jComboBox.setEnabled(true);
        jButtonAdd.setEnabled(false);
        jButtonDelete.setEnabled(false);
        jButtonEdit.setEnabled(false);
        jButtonSave.setEnabled(true);
        studentTableModel = null;
        studentSelectionModel = null;
        studentGradesModel = null;
        finalGradesModel = null;
        selectionMode = false;
        loadAttendanceForSelectedCourse();
    }//GEN-LAST:event_jButtonAttendanceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iconAttendance;
    private javax.swing.JLabel iconCreateReportCard;
    private javax.swing.JLabel iconManageAssignments;
    private javax.swing.JLabel iconManageCourses;
    private javax.swing.JLabel iconStudentFeedback;
    private javax.swing.JLabel iconViewFinalGrades;
    private javax.swing.JLabel iconViewStudentGrades;
    private javax.swing.JLabel iconViewStudents;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAttendance;
    private javax.swing.JButton jButtonCreateReportCard;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonManageAssignments;
    private javax.swing.JButton jButtonManageCourses;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonStudentFeedback;
    private javax.swing.JButton jButtonViewFinalGrades;
    private javax.swing.JButton jButtonViewStudentGrades;
    private javax.swing.JButton jButtonViewStudents;
    private javax.swing.JComboBox<Object> jComboBox;
    private javax.swing.JLabel jLabelMadeByJacquesSmit;
    private javax.swing.JLabel jLabelSGMS;
    private javax.swing.JLabel jLabelWelcomeName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

private void loadCourses() {
        try {
            List<Course> courses = studentDAO.findCourses();
            jComboBox.removeAllItems();
            jComboBox.addItem(new Course(0, "All Students"));
            for (Course c : courses) {
                jComboBox.addItem(c);
            }
            jComboBox.setSelectedIndex(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load courses: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int getSelectedCourseId() {
        Object sel = jComboBox.getSelectedItem();
        if (sel instanceof Course c) {
            return c.getCourseId();
        }
        return 0;
    }

    private int getSelectedGradeLevel() {
        Object sel = jComboBox.getSelectedItem();
        if (sel instanceof Integer g) {
            return g;
        }
        return 0;
    }
    
    private void loadStudentsForSelectedCourse() {
        try {
            int courseId = getSelectedCourseId();
            List<Student> students = courseId > 0 ?
                    studentDAO.findByCourse(courseId) : studentDAO.findAll();
            studentTableModel = new StudentTableModel(students);
            jTable.setModel(studentTableModel);
            jTable.setAutoCreateRowSorter(true);
            TableRowSorter<?> sorter = (TableRowSorter<?>) jTable.getRowSorter();
            sorter.setSortKeys(List.of(new RowSorter.SortKey(2, SortOrder.ASCENDING)));
            selectionMode = false;
            studentSelectionModel = null;
            SearchUtil.applyFilter(jTable, jTextFieldSearch.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load students: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void startEnrollmentEdit() {
        try {
            int courseId = getSelectedCourseId();
            List<Student> all = studentDAO.findAll();
            List<Student> enrolled = studentDAO.findByCourse(courseId);
            Set<Integer> initial = new HashSet<>();
            for (Student s : enrolled) {
                initial.add(s.getStudentId());
            }
            studentSelectionModel = new StudentSelectionTableModel(all, initial);
            jTable.setModel(studentSelectionModel);
            jTable.setAutoCreateRowSorter(true);
            javax.swing.table.DefaultTableCellRenderer leftRenderer =
                    new javax.swing.table.DefaultTableCellRenderer();
            leftRenderer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            jTable.getColumnModel().getColumn(1).setCellRenderer(leftRenderer);
            jTable.getColumnModel().getColumn(4).setCellRenderer(leftRenderer);
            TableRowSorter<?> sorter = (TableRowSorter<?>) jTable.getRowSorter();
            sorter.setSortKeys(List.of(
                    new RowSorter.SortKey(4, SortOrder.ASCENDING),
                    new RowSorter.SortKey(3, SortOrder.ASCENDING),
                    new RowSorter.SortKey(2, SortOrder.ASCENDING)));
            selectionMode = true;
            SearchUtil.applyFilter(jTable, jTextFieldSearch.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load students: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
  private void loadStudentGradesForSelectedCourse() {
        try {
            int courseId = getSelectedCourseId();
            if (courseId <= 0) {
                return;
            }
            AssignmentDAO assignmentDAO = new UcanaccessAssignmentDAO();
            GradeDAO gradeDAO = new UcanaccessGradeDAO();
            List<Student> students = studentDAO.findByCourse(courseId);
            List<Assignment> assignments = assignmentDAO.findByCourse(courseId);
            Map<Integer, Map<Integer, Integer>> grades = gradeDAO.findByCourse(courseId);
            studentGradesModel = new StudentGradesTableModel(students, assignments, grades, gradeDAO);
            finalGradesModel = null;
            studentTableModel = null;
            selectionMode = false;
            studentSelectionModel = null;
            jTable.setModel(studentGradesModel);
            jTable.setAutoCreateRowSorter(true);
            TableRowSorter<?> sorter = (TableRowSorter<?>) jTable.getRowSorter();
            sorter.setSortKeys(List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
            SearchUtil.applyFilter(jTable, jTextFieldSearch.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load grades: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadFinalGradesForSelectedGrade() {
        try {
            int grade = getSelectedGradeLevel();
            if (grade <= 0) {
                return;
            }
            FinalGradeDAO dao = new UcanaccessFinalGradeDAO();
            List<FinalGrade> list = dao.findByGradeLevel(grade);
            finalGradesModel = new FinalGradesTableModel(list);
            studentGradesModel = null;
            studentTableModel = null;
            selectionMode = false;
            studentSelectionModel = null;
            jTable.setModel(finalGradesModel);
            jTable.setAutoCreateRowSorter(true);
            TableRowSorter<?> sorter = (TableRowSorter<?>) jTable.getRowSorter();
            sorter.setSortKeys(List.of(new RowSorter.SortKey(1, SortOrder.ASCENDING)));
            SearchUtil.applyFilter(jTable, jTextFieldSearch.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load final grades: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadCoursesForGrades() {
        try {
            List<Course> courses = studentDAO.findCourses();
            jComboBox.removeAllItems();
            for (Course c : courses) {
                jComboBox.addItem(c);
            }
            if (jComboBox.getItemCount() > 0) {
                jComboBox.setSelectedIndex(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load courses: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadGradeLevelsForFinalGrades() {
        try {
            List<Integer> grades = studentDAO.findGradeLevels();
            jComboBox.removeAllItems();
            for (Integer g : grades) {
                if (g >= 10 && g <= 12) {
                    jComboBox.addItem(g);
                }
            }
            if (jComboBox.getItemCount() > 0) {
                jComboBox.setSelectedIndex(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load grade levels: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
  
    private void loadCoursesForAttendance() {
        try {
            List<Course> courses = studentDAO.findCourses();
            jComboBox.removeAllItems();
            for (Course c : courses) {
                jComboBox.addItem(c);
            }
            if (jComboBox.getItemCount() > 0) {
                jComboBox.setSelectedIndex(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load courses: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadAttendanceForSelectedCourse() {
        try {
            int courseId = getSelectedCourseId();
            if (courseId <= 0) {
                return;
            }
            List<Student> students = studentDAO.findByCourse(courseId);
            LocalDate today = LocalDate.now();
            LocalDate start = today.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));
            LocalDate end = start.plusDays(4);
            AttendanceDAO dao = new UcanaccessAttendanceDAO();
            Map<Integer, Map<LocalDate, Boolean>> data = dao.findByCourseAndDateRange(courseId, start, end);
            attendanceModel = new AttendanceTableModel(students, start, data);
            studentTableModel = null;
            studentSelectionModel = null;
            studentGradesModel = null;
            finalGradesModel = null;
            jTable.setModel(attendanceModel);
            jTable.setAutoCreateRowSorter(true);
            TableRowSorter<?> sorter = (TableRowSorter<?>) jTable.getRowSorter();
            sorter.setSortKeys(List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
            selectionMode = false;
            attendanceTodayColumn = today.getDayOfWeek().getValue();
            if (attendanceTodayColumn < 1 || attendanceTodayColumn > 5) {
                attendanceTodayColumn = -1;
            }
            SearchUtil.applyFilter(jTable, jTextFieldSearch.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load attendance: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
